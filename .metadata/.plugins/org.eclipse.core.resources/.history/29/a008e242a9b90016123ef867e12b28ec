import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;

public class VariableNode implements Node {
	private Color color;
	private String name, label, value;
	private Ellipse2D.Double node;
	private double x, y, r;
	
	public VariableNode(Color c, String n, String l, double x, double y, double r) {
		color = c; name = n; label = l; value = "0"; this.x = x; this.y = y; this.r = r;
		resize();
	}

	@Override
	public void draw(Graphics g, FontMetrics fm) {
		Graphics2D g2 = (Graphics2D)g;
		g2.setColor(color);
		g2.fill(node);
		g2.setColor(Color.BLACK);
		
		//center String/text
        int cx = (int) (node.getCenterX() - fm.stringWidth(label) / 2);
        int cy = (int) (node.getCenterY() - fm.getHeight() / 2 + fm.getAscent());
		
		g2.drawString(label, cx, cy);
	}
	
	// Scales the circle (position only) to compensate for resized window
	@Override
	public void resize() {
		node = new Ellipse2D.Double(x * Main.dimensions.getWidth(), y * Main.dimensions.getHeight(),
				r * 2, r * 2);
	}

	@Override
	public boolean contains(int x, int y) {
		return node.contains(x, y);
	}

	// Changes the circle node to a moved version, but keeps x and y the same as before the move
	@Override
	public void move(int dx, int dy) {
		node = new Ellipse2D.Double(x * Main.dimensions.getWidth() + dx,
				y * Main.dimensions.getHeight() + dy, r * 2, r * 2);
	}

	// Completes the move by setting x and y to the new values
	@Override
	public void finishMove() {
		x = node.getMinX() / Main.dimensions.getWidth();
		y = node.getMinY() / Main.dimensions.getHeight();
	}
	
	@Override
	public String toString() {
		return x + ", " + y;
	}

	@Override
	public int endpointX() {
		return (int)node.getCenterX();
	}
	
	@Override
	public int endpointY() {
		return (int)node.getCenterY();
	}

	@Override
	public Color getColor() {
		return color;
	}
	
	// Gives "variablename (symbol)"
	@Override
	public String getLabel() {
		return name + "(" + label + "){" + value + "}";
	}
	
	// Yes, this is horrible design.
	public String getSymbol() {
		return label;
	}
	
	public void setLabel(String l) {
		this.label = l;
	}
	
	public void setName(String n) {
		this.name = n;
	}
	
	public void setValue(String s) {
		this.value = s;
	}
	
}
