import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.LinkedList;

import javax.swing.JButton;
import javax.swing.JFrame;
//import javax.swing.JLabel;
import javax.swing.JPanel;

public class NodeDisplay extends JFrame implements MouseListener, MouseMotionListener {
	boolean dragging;
	Node dragNode;
	static Edge dragWire;
	static int handleX, handleY;
	
	Tool tool = Tool.NODE;
	
	public static class Nodes extends JPanel {
		private static final long serialVersionUID = 1L;
		
		static LinkedList<Node> nodes = new LinkedList<>();
		static LinkedList<Edge> edges = new LinkedList<>();

		@Override
        protected void paintComponent(Graphics g) {
        	//Main.print("drawing");
            super.paintComponent(g);
            g.setFont(Main.font);
            FontMetrics fm = g.getFontMetrics(Main.font);
            
            for (Edge e : edges) {
            	if (e == dragWire)
            		e.drawEndDrag(g, handleX, handleY);
            	else
            		e.draw(g);
            }
            
            for (Node n : nodes) {
            	n.draw(g, fm);
            }
		}

	}
	
	private static final long serialVersionUID = 1L;
	
	private JButton addVar;
	private JButton addEq;
	private JButton wireTool;
	private JButton nodeTool;
	private JButton deleteTool;
	//private JLabel label;

	public NodeDisplay(String title) {
		createComponents();
		setSize(600, 600);
		setTitle(title);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		createResizeListener(this);
		setVisible(true);
	}
	
	// Very long, messy method to make buttons at the top (and their basic functions)
	private void createComponents() {
		JPanel panel = new Nodes();
		addVar = new JButton("Add Variable");
		addEq = new JButton("Add Equation");
		wireTool = new JButton("Wiring Tool");
		nodeTool = new JButton("Node Tool");
		deleteTool = new JButton("Delete Tool");
		
		addVar.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				Nodes.nodes.add(new VariableNode(Color.CYAN, "x",
						Math.random() * 0.8, Math.random() * 0.8, Main.scale));
				repaint();
			}
		});
		
		addEq.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				Nodes.nodes.add(new EquationNode(Color.LIGHT_GRAY, "y = 5x + 6",
						Math.random() * 0.8, Math.random() * 0.8, Main.scale * 1.5));
				repaint();
			}
		});
		
		wireTool.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				addVar.setVisible(false);
				addEq.setVisible(false);
				tool = Tool.WIRE;
				panel.setBackground(Color.GRAY);
			}
		});
		
		nodeTool.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				addVar.setVisible(true);
				addEq.setVisible(true);
				tool = Tool.NODE;
				panel.setBackground(Color.WHITE);
			}
		});
		
		deleteTool.addActionListener(new ActionListener () {
			@Override
			public void actionPerformed(ActionEvent event) {
				addVar.setVisible(false);
				addEq.setVisible(false);
				tool = Tool.DELETE;
				panel.setBackground(new Color(127, 60, 60));
			}
		});
		
		//label = new JLabel("unneeded label :)");
		panel.add(addVar);
		panel.add(addEq);
		panel.add(nodeTool);
		panel.add(wireTool);
		panel.add(deleteTool);
		//panel.add(label);
		panel.addMouseListener(this);
		panel.addMouseMotionListener(this);
		
		panel.setBackground(Color.WHITE);
		add(panel);
	}
	
	// Adds a listener to maintain a variable for the window dimensions
	private void createResizeListener(NodeDisplay window) {
		this.addComponentListener(new ComponentListener() {
			// Maintains the window dimension variable
		    public void componentResized(ComponentEvent event) {
		    	if (window != null) {
			    	Main.dimensions = window.getBounds();
			    	
			    	for (Node n : Nodes.nodes) {
		            	n.resize();
		            }
		    	}
		    }
		    
		    // Extra methods unused for now
			@Override
			public void componentHidden(ComponentEvent arg0) {}
			@Override
			public void componentMoved(ComponentEvent arg0) {}
			@Override
			public void componentShown(ComponentEvent arg0) {}
		});
	}

		

	@Override
	public void mouseDragged(MouseEvent e) {
		if (!dragging)
			return;
		switch (tool) {
		case NODE:
			dragNode.move(e.getX() - handleX, e.getY() - handleY);
			repaint();
			break;
		case WIRE:
			handleX = e.getX();
			handleY = e.getY();
			repaint();
			break;
		case DELETE:
			break;
		}
	}

	@Override
	public void mousePressed(MouseEvent e) {
		Node n;
		switch (tool) {
		case NODE:
			// Set up parameters for dragging a node (if mouse is over one)
			n = getNode(e);
			if (n != null) {
				dragNode = n;
				dragging = true;
				handleX = e.getX();
				handleY = e.getY();
			}
			break;
		case WIRE:
			// Create a wire anchored on the node clicked, with the mouse controlling the other end
			n = getNode(e);
			if (n != null) {
				dragging = true;
				if (n instanceof VariableNode)
					dragWire = new Edge(n.getColor(), n, null);
				else
					dragWire = new Edge(n.getColor(), null, n);
				Nodes.edges.add(dragWire);
			}
			break;
		case DELETE:
			
			break;
		}
	}
	
	// Get the node the mouse is over in the specified event
	private Node getNode(MouseEvent e) {
		for (Node n : Nodes.nodes) {
			if (n.contains(e.getX(), e.getY()))
				return n;
		}
		return null;
	}
	
	@Override
	public void mouseReleased(MouseEvent e) {
		if (!dragging)
			return;
		switch (tool) {
		case NODE:
			dragging = false;
			dragNode.finishMove();
			dragNode = null;
			break;
		case WIRE:
			
			break;
		case DELETE:
			
			break;
		}
		if (dragging) {
			
		}
	}

	@Override
	public void mouseEntered(MouseEvent e) {}
	public void mouseExited(MouseEvent e) {}
	public void mouseClicked(MouseEvent e) {}
	public void mouseMoved(MouseEvent e) {}

	
}
