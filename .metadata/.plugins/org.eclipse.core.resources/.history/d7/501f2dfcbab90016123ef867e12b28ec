import java.awt.Color;
import java.awt.Font;
import java.awt.Rectangle;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

public class Main {
	public static HashMap<String, VariableNode> names = new HashMap<>();
	
	public static int scale = 40;
	
	public static NodeDisplay window;
	public static Rectangle dimensions;
	public static Font font;
	
	public static void main(String[] args) {
		font = new Font("Serif", Font.BOLD, scale);
		window = new NodeDisplay("Testing");
	}
	
	// Easy print method for debugging
	public static void print(Object... obs) {
		for (Object ob : obs)
			System.out.println(ob);
	}
	
	public static Color randomColor() {
		return new Color((int)(Math.random() * 128) + 128, (int)(Math.random() * 128) + 128, (int)(Math.random() * 128) + 128);
	}

	public static String getNextAvailableName() {
		for (char c = 'a'; c < 'z'; c++) {
			if (!names.containsKey(c + ""))
				return c + "";
		}
		return "?";
	}
	
	// Probably going to remain unused
	public static boolean canFind(String variable) {
		return false;
	}
	
	// Make the edges coming out of an equation representative of what 
	public static void updateEdges(EquationNode n, Equation e) {
		Set<String> needed = new HashSet<>(e.variables);
		Set<Edge> toRemove = new HashSet<>();
		
		for (Edge edge : NodeDisplay.Nodes.edges) {
			if (edge.end2 == n) {
				String symbol = ((VariableNode)edge.end1).getSymbol();
				if (needed.contains(symbol))
					needed.remove(symbol);
				else
					toRemove.add(edge);
			}
		}
		
		for (Edge edge : toRemove)
			NodeDisplay.Nodes.edges.remove(edge);
		
		for (String symbol : needed) {
			VariableNode vn = names.get(symbol);
			NodeDisplay.Nodes.edges.add(new Edge(vn.getColor(), vn, n));
		}
		
	}
	
	public static Double find(String variable) {
		Set<Node> visited = new HashSet<>();
		Stack<Node> stack = new Stack<>();
		HashMap<String, Double> known = new HashMap<>();
		
		// Go ahead and fill in the 'constant' variables
		for (Node n : NodeDisplay.Nodes.nodes) {
			if (n instanceof VariableNode && ((VariableNode)n).isKnown())
				known.put(((VariableNode)n).getSymbol(), ((VariableNode)n).getValue());
		}
		
		stack.push(names.get(variable));
		visited.add(names.get(variable));
		
		// Just do a normal stack traversal. Doesn't work for anywhere near all cases, but time and stuff.
		while (!stack.isEmpty() && !known.containsKey(variable)) {
			Node n = stack.pop();
			if (n instanceof EquationNode) {
				Set<String> unknowns = getUnknowns(((EquationNode)n).equation, known);
				if (unknowns.size() == 1) {
					String unknown = "";
					for (String one : unknowns) // Blanking on how to do this right...
						unknown = one;
					double value = solveFor(((EquationNode)n).equation, unknown);
					known.put(unknown, value);
				} else if (unknowns.size() > 1) {
					stack.push(n);
					for (String var : unknowns) {
						if (!visited.contains(names.get(var))) {
							stack.push(names.get(var));
							visited.add(names.get(var));
						}
					}
				}
				
			} else { // n is a VariableNode
				// Realizing I forgot to ever set up adjacency lists for variable nodes, just going to search all edges every time!
				for (Edge edge : NodeDisplay.Nodes.edges) {
					if (edge.end1 == n && !visited.contains(edge.end2)) {
						stack.push(edge.end2);
						visited.add(edge.end2);
					}
				}
			}
		}
		
		return known.containsKey(variable) ? known.get(variable) : null;
	}
	
	public static Set<String> getUnknowns(Equation e, HashMap<String, Double> known) {
		Set<String> result = new HashSet<>();
		for (String s : e.variables) {
			if (!known.containsKey(s))
				result.add(s);
		}
		return result;
	}
	
	public static double solveFor(Equation e, String var) {
		if (e.left.variables.contains(var)) { // put the variable on the right for convenience
			if (e.right.variables.contains(var)) {
				print("Can't solve this yet!!!");
				return 0;
			}
		}
	}
}
